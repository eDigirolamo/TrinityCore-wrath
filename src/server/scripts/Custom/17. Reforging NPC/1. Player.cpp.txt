1. src/server/game/Entities/Player/Player.cpp
1.1 Agregar:
    if (only_level_scale && (!ssd || !ssv))
        return;

+    uint32 statcount = proto->StatsCount;
+    ReforgeData* reforgeData = NULL;
+    bool decreased = false;
+    if (statcount < MAX_ITEM_PROTO_STATS)
+    {
+        if (Item* invItem = GetItemByPos(INVENTORY_SLOT_BAG_0, slot))
+        {
+            if (reforgeMap.find(invItem->GetGUID().GetCounter()) != reforgeMap.end())
+            {
+                reforgeData = &reforgeMap[invItem->GetGUID().GetCounter()];
+                ++statcount;
+            }
+        }
+    }
    for (uint8 i = 0; i < MAX_ITEM_PROTO_STATS; ++i)
    {
        uint32 statType = 0;

2. src/server/game/Entities/Player/Player.cpp
2.1 Agregar:
        }
        else
        {
-            if (i >= proto->StatsCount)
+            if (i >= statcount)
                continue;
            statType = proto->ItemStat[i].ItemStatType;
            val = proto->ItemStat[i].ItemStatValue;
+
+            if (reforgeData)
+            {
+                if(i == statcount-1)
+                {
+                    statType = reforgeData->increase;
+                    val = reforgeData->stat_value;
+                }
+                else if (!decreased && reforgeData->decrease == statType)
+                {
+                    val -= reforgeData->stat_value;
+                    decreased = true;
+                }
+            }
        }

        if (val == 0)

3. src/server/game/Entities/Player/Player.cpp
3.1 Agregar:
    }
}

+extern void RemoveReforge(Player* player, uint32 itemguid, bool update);
// Common operation need to remove item from inventory without delete in trade, auction, guild bank, mail....
void Player::MoveItemFromInventory(uint8 bag, uint8 slot, bool update)
{
    if (Item* it = GetItemByPos(bag, slot))
    {
        RemoveItem(bag, slot, update);
+        RemoveReforge(this, it->GetGUID().GetCounter(), true);
        ItemRemovedQuestCheck(it->GetEntry(), it->GetCount());
        it->SetNotRefundable(this, false);
        RemoveItemFromUpdateQueueOf(it, this);