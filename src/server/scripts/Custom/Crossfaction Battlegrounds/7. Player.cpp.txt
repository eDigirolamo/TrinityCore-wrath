1. src/server/game/Entities/Player/Player.cpp
1.1 Agregar:
#include "CombatPackets.h"
#include "Common.h"
#include "ConditionMgr.h"
+ #include "Config.h"
#include "CreatureAI.h"
#include "DatabaseEnv.h"
#include "DisableMgr.h"

2. src/server/game/Entities/Player/Player.cpp
2.1 Agregar:
#include "WorldSession.h"
#include "WorldStatePackets.h"

+ #include "CFBGData.h"
+
#define ZONE_UPDATE_INTERVAL (1*IN_MILLISECONDS)

#define PLAYER_SKILL_INDEX(x)       (PLAYER_SKILL_INFO_1_1 + ((x)*3))

3. src/server/game/Entities/Player/Player.cpp
3.1 Agregar:
Player::Player(WorldSession* session): Unit(true)
{
+    cfbgdata = std::make_unique<CFBGData>(this);
+
    m_objectType |= TYPEMASK_PLAYER;
    m_objectTypeId = TYPEID_PLAYER;

4. src/server/game/Entities/Player/Player.cpp
4.1 Agregar:
    SetRace(createInfo->Race);
    SetClass(createInfo->Class);
+    cfbgdata->InitializeCFData();
    SetGender(Gender(createInfo->Gender));
    SetPowerType(Powers(powertype), false);
    InitDisplayIds();

5. src/server/game/Entities/Player/Player.cpp
5.1 Agregar:
// This functions sets a skill line value (and adds if doesn't exist yet)
// To "remove" a skill line, set it's values to zero
- void Player::SetSkill(uint32 id, uint16 step, uint16 newVal, uint16 maxVal)
+ void Player::SetSkill(uint32 id, uint16 step, uint16 newVal, uint16 maxVal, bool defskill)
{
    if (!id)
        return;

6. src/server/game/Entities/Player/Player.cpp
6.1 Agregar:
    //has skill
    if (itr != mSkillStatus.end() && itr->second.uState != SKILL_DELETED)
    {
+        if (itr->second.defskill)
+            itr->second.defskill = defskill;
+
        currVal = SKILL_VALUE(GetUInt32Value(PLAYER_SKILL_VALUE_INDEX(itr->second.pos)));
        if (newVal)
        {

7. src/server/game/Entities/Player/Player.cpp
7.1 Agregar:
    SetRace(fields[3].GetUInt8());
    SetClass(fields[4].GetUInt8());
+    cfbgdata->InitializeCFData();
+    _LoadBGData(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_BG_DATA));
    SetGender(gender);

+    if (m_bgData.bgTeam &&
+        sBattlegroundMgr->GetBattleground(m_bgData.bgInstanceID, m_bgData.bgTypeID) &&
+        !cfbgdata->NativeTeam())
+    {
+        SetRace(cfbgdata->GetFRace());
+    }
+
    // check if race/class combination is valid
    PlayerInfo const* info = sObjectMgr->GetPlayerInfo(GetRace(), GetClass());
    if (!info)

8. src/server/game/Entities/Player/Player.cpp
8.1 Agregar:
    _LoadBoundInstances(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_BOUND_INSTANCES));
    _LoadInstanceTimeRestrictions(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_INSTANCE_LOCK_TIMES));
-    _LoadBGData(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_BG_DATA));

    GetSession()->SetPlayer(this);
    MapEntry const* mapEntry = sMapStore.LookupEntry(mapId);

9. src/server/game/Entities/Player/Player.cpp
9.1 Agregar:
    LearnDefaultSkills();
    LearnCustomSpells();

+    cfbgdata->ReplaceRacials();
+
    // must be before inventory (some items required reputation check)
    m_reputationMgr->LoadFromDB(holder.GetPreparedResult(PLAYER_LOGIN_QUERY_LOAD_REPUTATION));

10. src/server/game/Entities/Player/Player.cpp
10.1 Agregar:
        stmt->setUInt32(index++, GetGUID().GetCounter());
        stmt->setUInt32(index++, GetSession()->GetAccountId());
        stmt->setString(index++, GetName());
-        stmt->setUInt8(index++, GetRace());
+        stmt->setUInt8(index++, cfbgdata->GetORace());
        stmt->setUInt8(index++, GetClass());
        stmt->setUInt8(index++, GetNativeGender());   // save gender from PLAYER_BYTES_3, UNIT_BYTES_0 changes with every transform effect
        stmt->setUInt8(index++, GetLevel());

11. src/server/game/Entities/Player/Player.cpp
11.1 Agregar:
        // Update query
        stmt = CharacterDatabase.GetPreparedStatement(CHAR_UPD_CHARACTER);
        stmt->setString(index++, GetName());
-        stmt->setUInt8(index++, GetRace());
+        stmt->setUInt8(index++, cfbgdata->GetORace());
        stmt->setUInt8(index++, GetClass());
        stmt->setUInt8(index++, GetNativeGender());   // save gender from PLAYER_BYTES_3, UNIT_BYTES_0 changes with every transform effect
        stmt->setUInt8(index++, GetLevel());

12. src/server/game/Entities/Player/Player.cpp
12.1 Agregar:
        uint16 value = SKILL_VALUE(valueData);
        uint16 max = SKILL_MAX(valueData);

-        switch (itr->second.uState)
+        if (!itr->second.defskill)
        {
-            case SKILL_NEW:
-                stmt = CharacterDatabase.GetPreparedStatement(CHAR_INS_CHAR_SKILLS);
-                stmt->setUInt32(0, GetGUID().GetCounter());
-                stmt->setUInt16(1, uint16(itr->first));
-                stmt->setUInt16(2, value);
-                stmt->setUInt16(3, max);
-                trans->Append(stmt);
+            switch (itr->second.uState)
+            {
+                case SKILL_NEW:
+                    stmt = CharacterDatabase.GetPreparedStatement(CHAR_INS_CHAR_SKILLS);
+                    stmt->setUInt32(0, GetGUID().GetCounter());
+                    stmt->setUInt16(1, uint16(itr->first));
+                    stmt->setUInt16(2, value);
+                    stmt->setUInt16(3, max);
+                    trans->Append(stmt);

-                break;
-            case SKILL_CHANGED:
-                stmt = CharacterDatabase.GetPreparedStatement(CHAR_UPD_CHAR_SKILLS);
-                stmt->setUInt16(0, value);
-                stmt->setUInt16(1, max);
-                stmt->setUInt32(2, GetGUID().GetCounter());
-                stmt->setUInt16(3, uint16(itr->first));
-                trans->Append(stmt);
+                    break;
+                case SKILL_CHANGED:
+                    stmt = CharacterDatabase.GetPreparedStatement(CHAR_UPD_CHAR_SKILLS);
+                    stmt->setUInt16(0, value);
+                    stmt->setUInt16(1, max);
+                    stmt->setUInt32(2, GetGUID().GetCounter());
+                    stmt->setUInt16(3, uint16(itr->first));
+                    trans->Append(stmt);

-                break;
-            default:
-                break;
+                    break;
+                default:
+                    break;
+            }
        }
        itr->second.uState = SKILL_UNCHANGED;

13. src/server/game/Entities/Player/Player.cpp
13.1 Agregar:
    WorldPacket data;
    ChatHandler::BuildChatPacket(data, CHAT_MSG_SAY, language, this, this, _text);
-    SendMessageToSetInRange(&data, sWorld->getFloatConfig(CONFIG_LISTEN_RANGE_SAY), true);
+    SendMessageToSetInRange(&data, sWorld->getFloatConfig(CONFIG_LISTEN_RANGE_SAY), !sWorld->getBoolConfig(CONFIG_CFBG_ENABLED));
+
+    if (sWorld->getBoolConfig(CONFIG_CFBG_ENABLED))
+    {
+       ChatHandler::BuildChatPacket(data, CHAT_MSG_SAY, LANG_UNIVERSAL, this, nullptr, _text);
+       SendDirectMessage(&data);
+    }
}

void Player::Say(uint32 textId, WorldObject const* target /*= nullptr*/)

14. src/server/game/Entities/Player/Player.cpp
14.1 Agregar:
    WorldPacket data;
    ChatHandler::BuildChatPacket(data, CHAT_MSG_YELL, language, this, this, _text);
-    SendMessageToSetInRange(&data, sWorld->getFloatConfig(CONFIG_LISTEN_RANGE_YELL), true);
+    SendMessageToSetInRange(&data, sWorld->getFloatConfig(CONFIG_LISTEN_RANGE_YELL), !sWorld->getBoolConfig(CONFIG_CFBG_ENABLED));
+
+    if (sWorld->getBoolConfig(CONFIG_CFBG_ENABLED))
+    {
+       ChatHandler::BuildChatPacket(data, CHAT_MSG_YELL, LANG_UNIVERSAL, this, nullptr, _text);
+       SendDirectMessage(&data);
+    }
}

void Player::Yell(uint32 textId, WorldObject const* target /*= nullptr*/)

15. src/server/game/Entities/Player/Player.cpp
15.1 Agregar:
    WorldPacket data;
    ChatHandler::BuildChatPacket(data, CHAT_MSG_EMOTE, LANG_UNIVERSAL, this, this, _text);
-    SendMessageToSetInRange(&data, sWorld->getFloatConfig(CONFIG_LISTEN_RANGE_TEXTEMOTE), true, !GetSession()->HasPermission(rbac::RBAC_PERM_TWO_SIDE_INTERACTION_CHAT));
+    SendMessageToSetInRange(&data, sWorld->getFloatConfig(CONFIG_LISTEN_RANGE_TEXTEMOTE), !sWorld->getBoolConfig(CONFIG_CFBG_ENABLED), !GetSession()->HasPermission(rbac::RBAC_PERM_TWO_SIDE_INTERACTION_CHAT));
+
+    if (sWorld->getBoolConfig(CONFIG_CFBG_ENABLED))
+    {
+       ChatHandler::BuildChatPacket(data, CHAT_MSG_EMOTE, LANG_UNIVERSAL, this, nullptr, _text);
+       SendDirectMessage(&data);
+    }
}

void Player::TextEmote(uint32 textId, WorldObject const* target /*= nullptr*/, bool /*isBossEmote = false*/)

16. src/server/game/Entities/Player/Player.cpp
16.1 Agregar:
{
    m_bgData.bgTeam = team;
    SetArenaFaction(uint8(team == ALLIANCE ? 1 : 0));
+    cfbgdata->SetCFBGData();
}

uint32 Player::GetBGTeam() const
{
-    return m_bgData.bgTeam ? m_bgData.bgTeam : GetTeam();
+    return m_bgData.bgTeam ? m_bgData.bgTeam : m_team;
}

void Player::LeaveBattleground(bool teleportToEntryPoint)

17. src/server/game/Entities/Player/Player.cpp
17.1 Agregar:
    switch (GetSkillRangeType(rcInfo))
    {
        case SKILL_RANGE_LANGUAGE:
-            SetSkill(skillId, 0, 300, 300);
+            SetSkill(skillId, 0, 300, 300, true);
            break;
        case SKILL_RANGE_LEVEL:
        {

18. src/server/game/Entities/Player/Player.cpp
18.1 Agregar:
            else if (skillId == SKILL_LOCKPICKING)
                skillValue = std::max<uint16>(1, GetSkillValue(SKILL_LOCKPICKING));

-            SetSkill(skillId, 0, skillValue, maxValue);
+            SetSkill(skillId, 0, skillValue, maxValue, true);
            break;
        }
        case SKILL_RANGE_MONO:
-            SetSkill(skillId, 0, 1, 1);
+            SetSkill(skillId, 0, 1, 1, true);
            break;
        case SKILL_RANGE_RANK:
        {

19. src/server/game/Entities/Player/Player.cpp
19.1 Agregar:
            else if (GetClass() == CLASS_DEATH_KNIGHT)
                skillValue = std::min(std::max<uint16>({ uint16(1), uint16((GetLevel() - 1) * 5) }), maxValue);

-            SetSkill(skillId, rank, skillValue, maxValue);
+            SetSkill(skillId, rank, skillValue, maxValue, true);
            break;
        }
        default:

20. src/server/game/Entities/Player/Player.cpp
20.1 Agregar:
            uint16 max      = fields[2].GetUInt16();

            SkillRaceClassInfoEntry const* rcEntry = GetSkillRaceClassInfo(skill, GetRace(), GetClass());
+
            if (!rcEntry)
            {
                TC_LOG_ERROR("entities.player", "Player::_LoadSkills: Player '%s' (%s, Race: %u, Class: %u) has forbidden skill %u for his race/class combination",