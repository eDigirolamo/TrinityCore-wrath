1. /src/server/game/Scripting/ScriptMgr.h
1.1 Agregar:
         virtual void OnGroupRateCalculation(float& /*rate*/, uint32 /*count*/, bool /*isRaid*/) { }
 };
 
+class AllMapScript : public ScriptObject
+{
+protected:
+    AllMapScript(const char* name);
+
+public:
+    // Called when player enters any map
+    virtual void OnPlayerEnterAll(Map* /*map*/, Player* /*player*/) { }
+
+    // Called when player leaves any map
+    virtual void OnPlayerLeaveAll(Map* /*map*/, Player* /*player*/) { }
+
+    virtual void OnAllUpdate(Map* /*map*/, uint32 /*diff*/) { }
+};
+
 template<class TMap> class MapScript : public UpdatableScript<TMap>
 {
     MapEntry const* _mapEntry;

2. /src/server/game/Scripting/ScriptMgr.h
2.1 Agregar:
         UnitScript(char const* name);
 
     public:
+        // Called before heal is received
+        virtual void ModifyHealRecieved(Unit* /*healer*/, Unit* /*target*/, uint32& /*heal*/) { }
+
         // Called when a unit deals healing to another unit
         virtual void OnHeal(Unit* /*healer*/, Unit* /*reciever*/, uint32& /*gain*/) { }

3. /src/server/game/Scripting/ScriptMgr.h
3.1 Agregar:
         virtual CreatureAI* GetAI(Creature* /*creature*/) const = 0;
 };
 
+class TC_GAME_API AllCreatureScript : public ScriptObject
+{
+protected:
+    AllCreatureScript(const char* name);
+
+public:
+    // Called at the end of creature update
+    virtual void OnAllCreatureUpdate(Creature* /*creature*/, uint32 /*diff*/) { }
+};
+
 class TC_GAME_API GameObjectScript : public ScriptObject
 {
     protected:

4. /src/server/game/Scripting/ScriptMgr.h
4.1 Agregar:
         bool OnItemRemove(Player* player, Item* item);
         bool OnCastItemCombatSpell(Player* player, Unit* victim, SpellInfo const* spellInfo, Item* item);
 
+        public: /* AllCreatureScript */
+
+        void OnCreatureUpdateAll(Creature* creature, uint32 diff);
+
     public: /* CreatureScript */
 
         CreatureAI* GetCreatureAI(Creature* creature);

5. /src/server/game/Scripting/ScriptMgr.h
5.1 Agregar:
     public: /* UnitScript */
 
+        void ModifyHealRecieved(Unit* healer, Unit* target, uint32& heal);
         void OnHeal(Unit* healer, Unit* reciever, uint32& gain);
         void OnDamage(Unit* attacker, Unit* victim, uint32& damage);
         void ModifyPeriodicDamageAurasTick(Unit* target, Unit* attacker, uint32& damage);